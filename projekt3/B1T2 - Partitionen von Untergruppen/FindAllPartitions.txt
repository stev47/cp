##########################################################################################################################
##### Computerpraktikum, Block III ; 
##### Leo Margolis, Universitaet Stuttgart, WiSe 1012/13
#####
##### 
##### Gruppe VII: Fabio Valvano, Huy Nguyen, Dmitriy Sevkovych
##### Thema 1.2: Partitionen von Untergruppen
#####
##### Aufgabe 1a) 
##### Schreibe eine GAP-Funktion "FindAllPartitions(G)", welche fuer eine gegebene Gruppe G alle
##### nicht-trivialen Partitionen von G bestimmt.
##########################################################################################################################


FindAllPartitions := function(G)

 local i, j, k, a, b, temp, subgrps, combs, some_combs, partitions ;


###
###


# Teste, ob G die gestellten Bedingungen, d.h. ob G eine endliche Gruppe ist.

 if IsGroup(G) = false then

	Print(G, " ist keine Gruppe! Bitte für G eine Gruppe eingeben.\n");

	return false;
 
 elif Size(G) = infinity then
	
	Print(G, " ist keine endliche Gruppe! Bitte eine endliche Gruppe eingeben.\n");

	return false;

 fi;


###
###


# 1. Schritt: 
# Finde alle echten Untergruppen von G, entferne zudem die triviale Untergruppe aus der Liste der betrachteten Untergruppen "subgroups". 
# Teste, welche Vereinigungen von Untergruppen wieder die gesamte Gruppe G ergeben. Behalte diejenigen Vereinigungen, welche das erfüllen, 
# in der Liste "some_combs".
 
 subgrps := AllSubgroups(G);
 
 for i in subgrps do

	if ( IsTrivial(i) = true ) or ( Order(i) = Order(G) ) then

		Remove(subgrps, Position(subgrps,i));

	fi;

 od;


 combs := Combinations( subgrps );
 some_combs := [] ;

 for k in [1..Length( combs )] do
 
	temp := Union( Set( combs[k]{ [1..Length( combs[k] )] } ) );

	if temp = Set( G ) then

		Append(some_combs, [ combs[k]{[1..Length( combs[k])]} ] );

	fi;

 od; 


###
###


# 2. Schritt:
# Teste, ob für alle Kombinationen der Untergruppen aus "some_combs" paarweise der Schnitt trivial ist.
# Falls eine Kombination diese Eigenschaft nicht besitzt, wird sie aus der Liste "some_combs" entfernt.

a := 0;
b := 0;

for k in [1..Length( some_combs )] do


	for i in [1..Length( some_combs[k] )] do

		if b = 1 then

			b := 0;
			break;

		else

			for j in [1..Length( some_combs[k] )] do  

				if a = 1 then

					a := 0;
					break;
				
				else
	
					if i<>j then
				
						temp := Intersection( some_combs[k][i], some_combs[k][j] );
	
						
						if IsTrivial(temp) = false then
							
							Unbind( some_combs[k] );
					
							a := 1; 
							b := 1;

						fi;

					fi;	

				fi;

			od; # for j

		fi;

	od; # for i

 od; # for k

# Print("some_combs ", some_combs, "\n");

###
###

# Filter:
# Entferne die Gruppe G aus der Liste (da triviale Partition).

 for k in [1..Length(some_combs)] do

	if Length( some_combs[k] ) = 1 and Order( some_combs[k][1] ) = Order( G ) then

		Unbind( some_combs[k] );

	fi;

 od;


###
###


# Entferne nun die Löcher aus der Liste der überprüften Kombinationen. Diejenigen Kombinationen, welche den Test überstanden 
# haben, sind genau die gesuchten Partitionen von G:

 partitions := Set( some_combs );

 Print("\nDie Gruppe ", G, " besitzt die folgenden nicht-trivialen Partitionen:\n\n");

 return partitions;

 end; 
############################################### function FindAllPartitions ###############################################
